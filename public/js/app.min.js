jQuery(function($) {
	var displayRelativeDates = function() {
		$('.moment').not('.processed-ready').each(function(value) {
			var dateFromNow = moment($(this).text(), 'YYYY-MM-DD').fromNow();

			if (dateFromNow !== 'Invalid date') {
				$(this).text(dateFromNow);
			}

			$(this).addClass('processed-ready');
		});
	}
	var formatMoney = function() {
		$('.money').not('.processed-ready').each(function(value) {
			var formattedValue = accounting.formatMoney(accounting.unformat($(this).text()), '$ ');

			if (formattedValue !== undefined) {
				$(this).text(formattedValue);
			}
		});
	}
	var signMoney = function() {
		$('.money-signed').not('.processed-ready').each(function(value) {
			if ($(this).text().charAt(0) == '-') {
				$(this).addClass('negative');
			}
			else {
				$(this).addClass('positive');
			}
		});
	}
	displayRelativeDates();
	formatMoney();
	signMoney();

	$(document).on('ajaxComplete', function() {
		displayRelativeDates();
		formatMoney();
		signMoney();
	});

	$('.datepicker').each(function() {
		var dp = $(this);
		dp.datepicker({
			'zIndexOffset': 1050,
			'format': 'yyyy-mm-dd',
		})

		if (!dp.val()) {
			dp.datepicker('setDate', new Date()).datepicker('update');
		}
	});
});
var Loan = function(amount, interestRate, minimumPayment) {
  this.amount = parseFloat(amount);
  this.interestRate = parseFloat(interestRate);

  if (this.interestRate > 1) {
  	this.interestRate /= 100;
  }

  this.minimumPayment = parseFloat(minimumPayment);
  this.payment = this.minimumPayment;
};

Loan.prototype.makePayment = function(amount) {
	this.payment = amount;

	return this.calculate();
};

Loan.prototype.getPrincipal = function() {
	if (this.amount === undefined || this.amount === NaN) {
		return 0;
	}

	return this.amount;
}

Loan.prototype.calculate = function() {
	var i = 0;

	var principal = this.getPrincipal();

	var interestPaid    = 0;
	var date            = moment();
	var currentBalance  = principal;

	while (currentBalance > 0) {
		date.add(1, 'M');

		currentBalance      -= this.payment;
		currentBalance      *= 1 + this.interestRate;
		interestPaid        += currentBalance * this.interestRate;

		if (i > 960 || currentBalance >= Infinity) {
			return { interest: -1 }
		}
	}

	return {
		date:       date,
		interest:   interestPaid
	};
}

Loan.prototype.formatWithCommas = function(num) {
	// This function will add commas and
	// round a float to the hundredth place.
	return num.toString().replace(/(\.\d{2})\d+$/, "$1").replace(/(?=(\d{3})+(?!\d))/g, ",");
}
function StackedBarChart(element, label) {
  this.element = element;
  this.label = label;
  this.data = {
        labels: [],
        datasets: [{
            label: '',
            backgroundColor: '',
            data: []
        }]
    };
};

StackedBarChart.prototype.initializeChart = function() {
    this.chart = new Chart(this.element, {
        type: 'bar',
        data: this.data,
        options: {
            title: {
                display: true,
                text: this.label
            },
            tooltips: {
                mode: 'label',
                callbacks: {
                    label: function(tooltipItems, data) {
                        return data.datasets[tooltipItems.datasetIndex].label +': ' + '$' + tooltipItems.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                    }
                }
            },
            responsive: true,
            scales: {
                xAxes: [{
                    stacked: true,
                }],
                yAxes: [{
                    stacked: true,
                    ticks: {
                        callback: function(label) {
                            return  '$' + label.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                        }
                    }
                }]
            }
        }
    });
    return this;
}

StackedBarChart.prototype.updateData = function(data) {
    var self = this;
    self.data = data;
    var colors = self.getSemiRandomColors();
    $.each(self.data.datasets, function(i, dataset) {
        var randColor = Math.floor(Math.random() * colors.length);
        dataset.backgroundColor = colors[randColor]; // 'rgba(' + self.randomColor() + ',' + self.randomColor() + ',' + self.randomColor() + ',.7)'
        colors.splice(randColor, 1);
    });
}

StackedBarChart.prototype.redraw = function() {
    if (this.chart !== undefined) {
        this.chart.clear();
    }
    this.initializeChart();
}

StackedBarChart.prototype.getSemiRandomColors = function() {
    return [
        '#4D4D4D',
        '#5DA5DA',
        '#FAA43A',
        '#60BD68',
        '#F17CB0',
        '#B2912F',
        '#B276B2',
        '#DECF3F',
        '#F15854',
    ];
}

StackedBarChart.prototype.randomColor = function() {
    return Math.round(Math.random() * 255);
};

function PieChart(element, label) {
  this.element = element;
  this.label = label;
  this.data = {
        labels: [],
        datasets: [{
            data: [],
            backgroundColor: []
        }]
    };
};

PieChart.prototype.initializeChart = function() {
    this.chart = new Chart(this.element, {
        type: 'pie',
        data: this.data,
        options: {
            title: {
                display: true,
                text: this.label + ' (This Month)'
            },
            tooltips: {
                mode: 'label',
                callbacks: {
                    label: function(tooltipItems, data) {
                        return data.labels[tooltipItems.index] +': ' + '$' + data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                    }
                }
            },
            responsive: true,
        }
    });
    return this;
}

PieChart.prototype.updateData = function(data) {
    var self = this;
    self.data = data;
    var colors = self.getSemiRandomColors();
    $.each(self.data.datasets, function(i, dataset) {
        var backgroundColors = [];
        $.each(dataset.data, function(k, d) {
            var randColor = Math.floor(Math.random() * colors.length);
            backgroundColors.push(colors[randColor]);
            colors.splice(randColor, 1);
        });
        dataset.backgroundColor = backgroundColors;
    });
}

PieChart.prototype.redraw = function() {
    if (this.chart !== undefined) {
        this.chart.clear();
    }
    this.initializeChart();
}

PieChart.prototype.getSemiRandomColors = function() {
    return [
        '#4D4D4D',
        '#5DA5DA',
        '#FAA43A',
        '#60BD68',
        '#F17CB0',
        '#B2912F',
        '#B276B2',
        '#DECF3F',
        '#F15854',
    ];
}

PieChart.prototype.randomColor = function() {
    return Math.round(Math.random() * 255);
};

window.onload = function() {
    var reportName = $('#bdgtReport').data('name');
    var reportUrl = $('#bdgtReport').data('url');

    if (reportUrl !== undefined) {
        if (reportName === 'Spending By Category') {
            window.bdgtReport = new PieChart($('#bdgtReport')[0], reportName);
        } else {
            window.bdgtReport = new StackedBarChart($('#bdgtReport'), reportName);
        }

        $.getJSON(reportUrl, function(json) {
            window.bdgtReport.updateData(json);
            window.bdgtReport.redraw();
        });
    }
};
//# sourceMappingURL=app.min.js.map
$.fn.extend({
    treed: function (o) {

      var openedClass = 'fa fa-minus';
      var closedClass = 'fa fa-plus';

      if (typeof o != 'undefined'){
        if (typeof o.openedClass != 'undefined'){
        openedClass = o.openedClass;
        }
        if (typeof o.closedClass != 'undefined'){
        closedClass = o.closedClass;
        }
      };

        //initialize each of the top levels
        var tree = $(this);
        tree.addClass("tree");
        tree.find('li').has("ul").each(function () {
            var branch = $(this); //li with children ul
            branch.prepend("<i class='indicator " + closedClass + "'></i>");
            branch.addClass('branch');
            branch.on('click', function (e) {
                if (this == e.target) {
                    var icon = $(this).children('i:first');
                    icon.toggleClass(openedClass + " " + closedClass);
                    $(this).children().children().toggle();
                }
            })
            branch.children().children().toggle();
        });
        //fire event from the dynamically added icon
      tree.find('.branch .indicator').each(function(){
        $(this).on('click', function () {
            $(this).closest('li').click();
        });
      });
        //fire event to open branch if the li contains an anchor instead of text
        tree.find('.branch>a').each(function () {
            $(this).on('click', function (e) {
                $(this).closest('li').click();
                e.preventDefault();
            });
        });
        //fire event to open branch if the li contains a button instead of text
        tree.find('.branch>button').each(function () {
            $(this).on('click', function (e) {
                $(this).closest('li').click();
                e.preventDefault();
            });
        });
    }
});
$('#tree1').treed();
